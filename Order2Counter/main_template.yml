Parameters:

  DeployBucketName:
    Type: String
    AllowedPattern : ".+"


Resources:

  MenuBucket:
    Type: AWS::S3::Bucket
  
  KitchenQueue:
    Type: AWS::SQS::Queue

  AuditTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: order_id
          AttributeType: S
      KeySchema:
        -
          AttributeName: order_id
          KeyType: HASH
  
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: orderhandler-ex-role
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
      Path: /          

  RouterPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: Order2CounterRouterPolicy
      PolicyDocument:
        Statement:
        - Action:
          - sqs:SendMessage
          Effect: Allow
          Resource: !GetAtt GymQueue.Arn
        - Action:
          - dynamodb:PutItem
          Effect: Allow
          Resource: !GetAtt AuditTable.Arn
      Roles: [!Ref LambdaRole]


  RouterFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.12
      Handler: router.handle_order
      Role: !GetAtt LambdaRole.Arn
      Code:
        S3Bucket: !Ref DeployBucketName
        S3Key: code.zip
          
Outputs:
  menubucketname:
    Value: !Ref MenuBucket
  
  kitchenqurl:
    Value: !Ref GymQueue

  kitchenqarn:
    Value: !GetAtt GymQueue.Arn

  audittablename:
    Value: !Ref AuditTable
    
  audittablearn:
    Value: !GetAtt AuditTable.Arn 

  rolearn:
    Value: !GetAtt LambdaRole.Arn

  routerfunctionname:
    Value: !Ref RouterFunction
    